#class prompt open;

#function {__prompt_init__}{
    #var prompt_config {{status}{off}};
    
    prompt.Init;
    prompt.Enable;

    #return true;
};
#function {__prompt_reload__}{
    prompt.Init;
    prompt.Enable;
    #return true;
};
#function {__prompt_unload__}{
    prompt.Disable;
    #return true;
};

#nop prompt 是一个提示栏插件，支持丰富的自定义选项;

/*
整个屏幕划分为七个区域，从上到下依次为：
Top line1
Top line2
...
Top lineN
----------- TopSepBar --------------
（游戏区）
----------- MidSepBar --------------
Bot line1
Bot line2
...
Bot lineN
----------- BotSepBar --------------
（输入区）

除了输入区和游戏区之外，剩下五个区域都可以定制，用来显示信息字段。

信息字段的编排是高度可定制的，每个字段的标签、内容、颜色、显示风格、行为属性，
都可以通过自己修改 #list prompt-fields 来修改。

下面是对 #list prompt-fields
的格式说明，但不建议直接在此处修改变量，请通过 etc/ui-settings.tin 来修改。
prompt 模块在启动时会自动加载该文件。

example:
#list prompt-fields create {
    { {place}{BotSepBar}  {label}{URL}  {name}{URL}  {cooldown}{180} }
};

#list prompt-fields 是一个列表，其中中每个元素是一个 table，代表一个信息。


table 的可用字段有：
1. place 枚举值 可选项: {Top|TopSepBar|MidSepBar|Bot|BotSepBar}
  希望将信息显示在屏幕上的什么位置
  其中 {Top} 和 {Bot} 支持多行，其它三个只有一行
  默认为 BotSepBar

2. line 自然数
   只有 place={Top|Bot} 才支持 line，代表第几行，最上面是第一行
   默认为 1

3. order 自然数
   在同一行中的次序，默认按照在 list 中出现的顺序来排序。

4. label 中英文字符串
   信息标签，每个信息都可以有一个标签，显示在内容前面。
   默认为空白

5. color tintin 格式的颜色代码，例如 <ddd>
   信息标签的颜色，通过该选项可以为标签指定一个与配色主题不一样的颜色。
   一般来说只有极个别选项才需要特别的颜色，没必要为每个选项都指定颜色，
   因为那样的话你还不如去设置配色主题，参见下面配色主题的设置。
   默认为空白，代表采用配色主题.

6. name 英文字符串 不能为空
   信息名称，必须唯一，不能重复。

7. width 整数
   信息宽度，如果信息内容长度变化较大，可以设置一个固定宽度，以免晃动。
   默认为 0，表示按照内容长度自动适配。

8. visibility 枚举值 {AutoHide|HideLabel|Always}
   含义如下：
      * AutoHide 如果信息内容为空，则不显示此项内容
      * HideLabel 仅显示内容，不显示标题
      * Always 不论内容是否为空，始终显示。
   默认为 AutoHide

9. cooldown 非负整数
   该信息的有效时间。如果 cooldown 不为 0，则该信息被更新时其标签将会以
   颜色主题中 HotLabel 所指定的风格显示并持续若干秒后，转为由 CoolLabel
   所指定的风格显示。持续时间由 cooldown 字段的值来决定，单位为秒。
   如果 cooldown 为 0，则始终以 HotLabel 所指定的风格显示。
   注意，cooldown 不为零的字段将自动获得 visibility=AutoHide 属性，无论
   visibility 选项原本被设置成了什么。
   默认值为 0

10. countdown 枚举值 {Auto|Clock|Seconds}
   倒计时类型的字段，其内容中所有形如 (%d) 的内容将会被替换成倒计时显示,
   其中()用来隔离其它文本内容。
   本插件会自动为该字段更新其内容，以确保用户能够看到倒计时的效果。
   倒计时有两种显示样式，时钟样式（N天 HH:MM:SS）和读秒样式（N秒）。如果
   设置为 Auto 则根据剩余时间长短，自动切换两种显示效果。

不建议直接在此处修改变量，请通过 etc/ui-settings.tin 来修改。

example:
#list prompt-fields create {
    { {place}{BotSepBar}  {label}{URL}  {name}{URL}  {cooldown}{180} }
};

*/
#list prompt-fields create {};

#nop 配色主题，注意这里不要直接嵌入 SGR（ansi codes），否则计算宽度时会有问题。;
#var prompt-theme {
    {Disable}{<100>}
    {TopSepBar}{<020>}
    {MidSepBar}{<020>}
    {BotSepBar}{<020>}
    {HotLabel}{<100>}
    {CoolLabel}{<070>}
    {Value}{<070>}
};

#nop 自定义图标;
#var prompt-icon {
    {DisableRefresh}{🚫}
};

#nop 热键绑定;
#list global-key-bindings create {
    {{key}{\cs}    {action}{prompt.ToggleSwitch}}
};

#var prompt-top-max-line {0};
#var prompt-bot-max-line {0};

#nop 所有的字段值的字典;
#var prompt-dict {};

#nop 上次实际绘制屏幕的时间;
#var prompt-last-draw {0};

#alias {prompt.Init} {
    #read {etc/ui-settings.tin};
    prompt.Set {};
    prompt.bindKey;
};

#nop 设置字段值，被设置的字段值将立即显示在屏幕上;
#alias {prompt.Set} {
    #local fields   {%1};

    #local now {};
    #format now {%T};

    #local field    {};
    #foreach {*fields[]} {field} {
        #var prompt-dict[$field] {
            {updateTime}{$now}
            {showTime}{$now}
            {value}{$fields[$field]}
        };
    };

    prompt.refresh;
};

#nop 设置字段值，被设置的字段值将立即显示在屏幕上，但会在一段时间后消失;
#alias {prompt.SetAwhile} {
    #local id    {%1};
    #local value {%2};
    #local secs  {%3};

    #if { "$secs" == "" } {
        #local secs {5};
    };

    prompt.Set {{$id}{$value}};

    #line sub {VARIABLES} {
        #delay prompt-set-awhile-$id {
            prompt.Set {{$id}{}};
        } {$secs};
    };
};

#nop 显示字段值;
#alias {prompt.refresh} {
    #local topMaxLine   {0};
    #local botMaxLine   {0};

    #local topLines     {};
    #local botLines     {};
    #local topSepBar    {};
    #local midSepBar    {};
    #local botSepBar    {};

    #foreach {*{prompt-fields[]}} {idx} {
        #local field {${prompt-fields[$idx]}};
        #if { "$field[visibility]" == "" } {
            #local field[visibility] {AutoHide};
        };
        #switch {"$field[place]"} {
            #case {"Top"} {
                #while {1} {
                    #if { $field[line] <= $topMaxLine } {
                        #break;
                    };
                    #math topMaxLine {$topMaxLine + 1};
                    #local topLines[$topMaxLine] {};
                };
                #if { "$field[order]" == "" } {
                    #local field[order] {@eval{ @max{{0;*topLines[$field[line]][]}} + 1 }};
                };
                #local topLines[$field[line]][$field[order]] {$field};
            };
            #case {"Bot"} {
                #while {1} {
                    #if { $field[line] <= $botMaxLine } {
                        #break;
                    };
                    #math botMaxLine {$botMaxLine + 1};
                    #local botLines[$botMaxLine] {};
                };
                #if { "$field[order]" == "" } {
                    #local field[order] {@eval{ @max{{0;*botLines[$field[line]][]}} + 1 }};
                };
                #local botLines[$field[line]][$field[order]] {$field};
            };
            #case {"TopSepBar"} {
                #if { "$field[order]" == "" } {
                    #local field[order] {@eval{ @max{{0;*topSepBar[]}} + 1 }};
                };
                #local topSepBar[$field[order]] {$field};
            };
            #case {"MidSepBar"} {
                #if { "$field[order]" == "" } {
                    #local field[order] {@eval{ @max{{0;*midSepBar[]}} + 1 }};
                };
                #local midSepBar[$field[order]] {$field};
            };
            #case {"BotSepBar"} {
                #if { "$field[order]" == "" } {
                    #local field[order] {@eval{ @max{{0;*botSepBar[]}} + 1 }};
                };
                #local botSepBar[$field[order]] {$field};
            };
            #default {
            };
        };
    };

    #local barColor {};
    #if { "${prompt-dict[switch][value]}" != "" } {
        #local barColor {${prompt-theme[Disable]}};
    };

    #if { "$topSepBar" != "" } {
        #math topMaxLine {$topMaxLine + 1};
    };

    #if { $botMaxLine == 0 && ( "$midSepBar" == "" || "$botSepBar" == "" ) } {
        #local botMaxLine {1};
    };
    #else {
        #math botMaxLine {$botMaxLine + 2};
    };

    #if {  "${prompt-top-max-line}" != "$topMaxLine"
        || "${prompt-bot-max-line}" != "$botMaxLine" } {
        #var prompt-top-max-line {$topMaxLine};
        #var prompt-bot-max-line {$botMaxLine};
        #local arg1 {$topMaxLine};
        #local arg2 {$botMaxLine};
        #split $arg1 $arg2;
    };

    #if { "$topSepBar" != "" } {
        #local text {@__prompt_build_line__{{$topSepBar}}};
        #if { "$barColor" == "" } {#local barColor {${prompt-theme[TopSepBar]}}};
        #local text {@__prompt_fill_line__{{$text[text]};{$text[width]};$barColor}};
        #echo {{%s}{$topMaxLine}} {$text};
    };

    #local line {};
    #foreach {*topLines[]} {line} {
        #local fields {$topLines[$line]};
        #local text {@__prompt_build_line__{{$fields}}};
        #echo {{%s}{$line}} {$text[text]};
    };

    #if { "$midSepBar" != "" } {
        #local text {@__prompt_build_line__{{$midSepBar}}};
        #if { "$barColor" == "" } {#local barColor {${prompt-theme[MidSepBar]}}};
        #local text {@__prompt_fill_line__{{$text[text]};{$text[width]};$barColor}};
        #math line {$botMaxLine + 1};
        #echo {{%s}{-$line}} {$text};
    };

    #foreach {*botLines[]} {line} {
        #local fields {$botLines[$line]};
        #local text {@__prompt_build_line__{{$fields}}};
        #math line {$botMaxLine - $line + 1};
        #echo {{%s}{-$line}} {$text[text]};
    };

    #if { "$botSepBar" != "" } {
        #local text {@__prompt_build_line__{{$botSepBar}}};
        #if { "$barColor" == "" } {#local barColor {${prompt-theme[BotSepBar]}}};
        #local text {@__prompt_fill_line__{{$text[text]};{$text[width]};$barColor}};
        #echo {{%s}{-2}} {$text};
    };
};

#function {__prompt_build_line__} {
    #local fields       {%1};
    #local text         {};
    #local order        {};
    #local lineWidth    {0};
    #foreach {*fields[]} {order} {
        #local field {$fields[$order]};
        #local name  {$field[name]};
        #local label {$field[label]};
        #local color {$field[color]};
        #local width {$field[width]};
        #local value {${prompt-dict[$name]}};
        #local now {};
        #format now {%T};

        #local cool {false};

        #if { "$color" == "" } {
            #if { $field[cooldown] > 0 && $now - $value[updateTime] > $field[cooldown] } {
                #local color {${prompt-theme[CoolLabel]}};
                #local cool {true};
            };
            #else {
                #local color {${prompt-theme[HotLabel]}};
            };
        };

        #if { "${prompt-dict[switch][value]}" != "" } {
            #local color {${prompt-theme[Disable]}};
        };

        #if { "$value[value]" == "" && ( "$field[visibility]" == "AutoHide" || "$cool" == "true" ) } {
            #continue;
        };

        #if { "$label" != "" } {
            #local label {$color$label<070> };
        };

        #if { "$field[visibility]" == "HideLabel" } {
            #local label {};
        };

        #if { "$label$value[value]" == "" } {
            #continue;
        };

        #local color {${prompt-theme[Value]}};

        #if { "$field[countdown]" != "" } {
            #local seconds {};
            #math seconds {$now - ${prompt-dict[$name][showTime]}};
            #replace value[value] {^%+1..d$} {@__prompt_countdown__{&1;$seconds}};
            #replace value[value] {(%+1..d)} {(@__prompt_countdown__{&1;$seconds})};
            #var {prompt-dict[$name][showTime]} {$now};
            #var {prompt-dict[$name][value]} {$value[value]};
            #replace value[value] {^%+1..d$} {@__prompt_show_countdown__{$field[countdown];&1}};
            #replace value[value] {(%+1..d)} {(@__prompt_show_countdown__{$field[countdown];&1})};
        };

        #format value {$color%-${width}s<070>} {$value[value]};
        #math lineWidth {$lineWidth + @strWidth{$label} + @strWidth{$value}};
        #if { "$text" == "" } {
            #local text {$label$value};
        };
        #else {
            #local text {$text $label$value};
            #math lineWidth {$lineWidth + 1};
        };
    };
    #return {{width}{$lineWidth}{text}{$text}};
};

#function {__prompt_countdown__} {
    #local value    {%1};
    #local count    {%2};

    #math value {$value - $count};
    #if { $value < 0 } {
        #local value {0};
    };

    #return {$value};
};

#function {__prompt_show_countdown__} {
    #local type     {%1};
    #local secs     {%2};
    #local ret      {};

    #if { "$type" == "Auto" } {
        #if { $secs > 600 } {
            #local type {Clock};
        };
        #else {
            #local type {Seconds};
        };
    };

    #if { "$type" == "Clock" } {
        #if { $secs > 86400 } {
            #math ret {$secs / 86400};
            #local ret {$ret天};
            #math secs {$secs % 86400};
        };

        #local hour {};
        #local mins {};
        #math hour {$secs / 3600};
        #math secs {$secs % 3600};
        #math mins {$secs / 60};
        #math secs {$secs % 60};
        #format ret {%s%%02d:%%02d:%%02d} {$ret} {$hour} {$mins} {$secs};
    };
    #elseif { "$type" == "Seconds" } {
        #local ret {${secs}s};
    };

    #return {$ret};
};

#function {__prompt_fill_line__} {
    #local text     {%1};
    #local width    {%2};
    #local color    {%3};

    #local newText {@trim{$text}};
    #math width {$width + @strWidth{$newText} - @strWidth{$text}};

    #local screenWidth {0};
    #screen get COLS screenWidth;

    #local leftLen {0};
    #local rightLen {0};
    #math leftLen {($screenWidth - $width) / 2 - 1};
    #math rightLen {$screenWidth - $leftLen - $width - 2};

    #local left {};
    #format {left} {%${leftLen}s} {};
    #replace {left} { } {─};

    #local right {};
    #format {right} {%${rightLen}s} {};
    #replace {right} { } {─};

    #if { $leftLen < 0 } {
        #format {newText} {%$screenWidth.${screenWidth}s} {$newText};
        #return {$newText};
    };
    #elseif { "$newText" == "" } {
        #return {$color$left──$right<070>};
    };
    #else {
        #return {$color$left<070> $newText $color$right<070>};
    };
};

#event {SCREEN RESIZE} {
    #var prompt-top-max-line {0};
    #var prompt-bot-max-line {0};
    prompt.refresh;
};

#alias {prompt.updateHP} {
    prompt.Set {
        {exp}{$char[HP][经验显示]}
        {pot}{$char[HP][潜能显示]}
    }
};

#alias {prompt.updateSM} {
    prompt.Set {
        {yunqi}{$char[STATUS][气血恢复]}
        {status}{$char[STATUS][健康状态]}
        {persist}{$char[STATUS][持续效果]}
    }
};

#alias {prompt.Disable} {
    prompt.Set {{switch}{${prompt-icon[DisableRefresh]}}};
    #untick prompt.refresh;
};

#alias {prompt.Enable} {
    prompt.Set {{switch}{}};
    #tick prompt.refresh {prompt.refresh} 1;
};

#alias {prompt.ToggleSwitch} {
    #if { "${prompt-dict[switch][value]}" == "" } {
        prompt.Disable;
    };
    #else {
        prompt.Enable;
    };
};

#alias {prompt.bindKey} {
    #local idx {};
    #foreach {*{global-key-bindings[]}} {idx} {
        #local key  {${global-key-bindings[$idx][key]}};
        #local code {${global-key-bindings[$idx][action]}};
        #line sub var #macro {$key} {$code};
    };
};

#alias {prompt.test} {
    #local fullme {<010>很久没有进行机器人检查(fullme)了，任务奖励将受到影响。<070>};
    #local fullme {http://pkuxkx.com/antirobot/robot.php?filename=1576762922984895};
    prompt.Set { {URL}{$fullme} };
    prompt.Set {
        {pot}{357.75万}
        {exp}{7510.56万}
        {expSpd}{11.88万/小时}
        {profit}{308金币/小时}
    };
    prompt.Set {
        {job}{<171>乔峰}
        {stage}{寻找NPC}
        {area}{建康}
        {room}{中城}
        {npc}{庞九公}
        {type}{杀死}
    };
};

#class prompt close;
